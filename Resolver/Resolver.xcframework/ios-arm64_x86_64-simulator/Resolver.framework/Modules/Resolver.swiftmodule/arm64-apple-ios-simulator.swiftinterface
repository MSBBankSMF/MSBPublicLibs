// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Resolver
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol ResolverRegistering {
  static func registerAllServices()
}
public protocol Resolving {
  var resolver: Resolver.Resolver { get }
}
extension Resolver.Resolving {
  public var resolver: Resolver.Resolver {
    get
  }
}
final public class Resolver {
  public static var main: Resolver.Resolver
  public static var root: Resolver.Resolver
  public static var defaultScope: any Resolver.ResolverScope
  public init(parent: Resolver.Resolver? = nil)
  final public func registerServices()
  public static var registerServices: (() -> Swift.Void)?
  public static func reset()
  @discardableResult
  public static func register<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, factory: @escaping Resolver.ResolverFactory<Service>) -> Resolver.ResolverOptions<Service>
  @discardableResult
  public static func register<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, factory: @escaping Resolver.ResolverFactoryResolver<Service>) -> Resolver.ResolverOptions<Service>
  @discardableResult
  public static func register<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, factory: @escaping Resolver.ResolverFactoryArgumentsN<Service>) -> Resolver.ResolverOptions<Service>
  @discardableResult
  final public func register<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, factory: @escaping Resolver.ResolverFactory<Service>) -> Resolver.ResolverOptions<Service>
  @discardableResult
  final public func register<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, factory: @escaping Resolver.ResolverFactoryResolver<Service>) -> Resolver.ResolverOptions<Service>
  @discardableResult
  final public func register<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, factory: @escaping Resolver.ResolverFactoryArgumentsN<Service>) -> Resolver.ResolverOptions<Service>
  public static func resolve<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, args: Any? = nil) -> Service
  final public func resolve<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, args: Any? = nil) -> Service
  public static func optional<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, args: Any? = nil) -> Service?
  final public func optional<Service>(_ type: Service.Type = Service.self, name: Swift.String? = nil, args: Any? = nil) -> Service?
  @objc deinit
}
extension Resolver.Resolver {
  public struct Args {
    public init(_ args: Any?)
    public func callAsFunction<T>() -> T
    public func callAsFunction<T>(_ key: Swift.String) -> T
    public func optional<T>() -> T?
    public func optional<T>(_ key: Swift.String) -> T?
    public func get<T>() -> T
    public func get<T>(_ key: Swift.String) -> T
  }
}
public typealias ResolverFactory<Service> = () -> Service?
public typealias ResolverFactoryResolver<Service> = (_ resolver: Resolver.Resolver) -> Service?
public typealias ResolverFactoryArgumentsN<Service> = (_ resolver: Resolver.Resolver, _ args: Resolver.Resolver.Args) -> Service?
public typealias ResolverFactoryMutator<Service> = (_ resolver: Resolver.Resolver, _ service: Service) -> Swift.Void
public typealias ResolverFactoryMutatorArgumentsN<Service> = (_ resolver: Resolver.Resolver, _ service: Service, _ args: Resolver.Resolver.Args) -> Swift.Void
public class ResolverOptions<Service> {
  public var scope: any Resolver.ResolverScope
  public init(resolver: Resolver.Resolver)
  @discardableResult
  final public func implements<Protocol>(_ type: Protocol.Type, name: Swift.String? = nil) -> Resolver.ResolverOptions<Service>
  @discardableResult
  final public func resolveProperties(_ block: @escaping Resolver.ResolverFactoryMutator<Service>) -> Resolver.ResolverOptions<Service>
  @discardableResult
  final public func resolveProperties(_ block: @escaping Resolver.ResolverFactoryMutatorArgumentsN<Service>) -> Resolver.ResolverOptions<Service>
  @discardableResult
  final public func scope(_ scope: any Resolver.ResolverScope) -> Resolver.ResolverOptions<Service>
  @objc deinit
}
public class ResolverRegistration<Service> : Resolver.ResolverOptions<Service> {
  public var key: Swift.Int
  public var cacheKey: Swift.String
  public init(resolver: Resolver.Resolver, key: Swift.Int, name: Swift.String?)
  public func resolve(resolver: Resolver.Resolver, args: Any?) -> Service?
  @objc deinit
}
final public class ResolverRegistrationOnly<Service> : Resolver.ResolverRegistration<Service> {
  final public var factory: Resolver.ResolverFactory<Service>
  public init(resolver: Resolver.Resolver, key: Swift.Int, name: Swift.String?, factory: @escaping Resolver.ResolverFactory<Service>)
  final override public func resolve(resolver: Resolver.Resolver, args: Any?) -> Service?
  @objc deinit
}
final public class ResolverRegistrationResolver<Service> : Resolver.ResolverRegistration<Service> {
  final public var factory: Resolver.ResolverFactoryResolver<Service>
  public init(resolver: Resolver.Resolver, key: Swift.Int, name: Swift.String?, factory: @escaping Resolver.ResolverFactoryResolver<Service>)
  final override public func resolve(resolver: Resolver.Resolver, args: Any?) -> Service?
  @objc deinit
}
final public class ResolverRegistrationArgumentsN<Service> : Resolver.ResolverRegistration<Service> {
  final public var factory: Resolver.ResolverFactoryArgumentsN<Service>
  public init(resolver: Resolver.Resolver, key: Swift.Int, name: Swift.String?, factory: @escaping Resolver.ResolverFactoryArgumentsN<Service>)
  final override public func resolve(resolver: Resolver.Resolver, args: Any?) -> Service?
  @objc deinit
}
extension Resolver.Resolver {
  public static let application: Resolver.ResolverScopeApplication
  public static let cached: Resolver.ResolverScopeCache
  public static let graph: Resolver.ResolverScopeGraph
  public static let shared: Resolver.ResolverScopeShare
  public static let unique: Resolver.ResolverScopeUnique
}
public protocol ResolverScope : AnyObject {
  func resolve<Service>(resolver: Resolver.Resolver, registration: Resolver.ResolverRegistration<Service>, args: Any?) -> Service?
}
public class ResolverScopeApplication : Resolver.ResolverScope {
  public init()
  final public func resolve<Service>(resolver: Resolver.Resolver, registration: Resolver.ResolverRegistration<Service>, args: Any?) -> Service?
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ResolverScopeCache : Resolver.ResolverScopeApplication {
  override public init()
  final public func reset()
  @objc deinit
}
final public class ResolverScopeGraph : Resolver.ResolverScope {
  public init()
  final public func resolve<Service>(resolver: Resolver.Resolver, registration: Resolver.ResolverRegistration<Service>, args: Any?) -> Service?
  @objc deinit
}
final public class ResolverScopeShare : Resolver.ResolverScope {
  public init()
  final public func resolve<Service>(resolver: Resolver.Resolver, registration: Resolver.ResolverRegistration<Service>, args: Any?) -> Service?
  final public func reset()
  @objc deinit
}
final public class ResolverScopeUnique : Resolver.ResolverScope {
  public init()
  final public func resolve<Service>(resolver: Resolver.Resolver, registration: Resolver.ResolverRegistration<Service>, args: Any?) -> Service?
  @objc deinit
}
public protocol StoryboardResolving : Resolver.Resolving {
  func resolveViewController()
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var resolving: Swift.Bool {
    @objc get
    @objc set
  }
}
@propertyWrapper public struct Injected<Service> {
  public init()
  public init(name: Swift.String? = nil, container: Resolver.Resolver? = nil)
  public var wrappedValue: Service {
    get
    set
  }
  public var projectedValue: Resolver.Injected<Service> {
    get
    set
  }
}
@propertyWrapper public struct LazyInjected<Service> {
  public var container: Resolver.Resolver?
  public var name: Swift.String?
  public var args: Any?
  public init()
  public init(name: Swift.String? = nil, container: Resolver.Resolver? = nil)
  public var isEmpty: Swift.Bool {
    get
  }
  public var wrappedValue: Service {
    mutating get
    set
  }
  public var projectedValue: Resolver.LazyInjected<Service> {
    get
    set
  }
  public mutating func release()
}
@propertyWrapper public struct WeakLazyInjected<Service> where Service : AnyObject {
  public var container: Resolver.Resolver?
  public var name: Swift.String?
  public var args: Any?
  public init()
  public init(name: Swift.String? = nil, container: Resolver.Resolver? = nil)
  public var isEmpty: Swift.Bool {
    get
  }
  public var wrappedValue: Service? {
    mutating get
    set
  }
  public var projectedValue: Resolver.WeakLazyInjected<Service> {
    get
    set
  }
}
@propertyWrapper public struct OptionalInjected<Service> {
  public init()
  public init(name: Swift.String? = nil, container: Resolver.Resolver? = nil)
  public var wrappedValue: Service? {
    get
    set
  }
  public var projectedValue: Resolver.OptionalInjected<Service> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @_Concurrency.MainActor @preconcurrency public struct InjectedObject<Service> : SwiftUICore.DynamicProperty where Service : Combine.ObservableObject {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public init(name: Swift.String? = nil, container: Resolver.Resolver? = nil)
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: Service {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.ObservedObject<Service>.Wrapper {
    get
  }
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Resolver.InjectedObject : Swift.Sendable {}
